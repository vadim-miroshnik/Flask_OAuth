version: '3.9'

services:

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
    networks:
      - movies
    depends_on:
      - auth

  auth:
    container_name: auth
    build:
      dockerfile: Dockerfile2
      context: ./src
    image: auth
    environment:
      REDIS__HOST: redis
      POSTGRES__HOST: postgres
      POSTGRES__USER: ${POSTGRES__USER}
      POSTGRES__PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES__DB_NAME: ${POSTGRES__DB_NAME}
      SUPERUSER__USERNAME: ${SUPERUSER__USERNAME}
      SUPERUSER__PASSWORD: ${SUPERUSER__PASSWORD}
      APP__JWT_SECRET_KEY: ${APP__JWT_SECRET_KEY}
    env_file:
      - .env
    networks:
      - movies
    depends_on:
      - redis
      - postgres

  redis:
    container_name: redis
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - movies

  postgres:
    container_name: postgres_container
    env_file:
      - .env
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES_DB: ${POSTGRES__DB_NAME}
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    networks:
      - movies
    restart: unless-stopped

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - 16686:16686
    command:
      - "--log-level=debug"
    depends_on:
      - nginx
    restart: always

networks:
    movies:
      name: movies


volumes:
    postgres:
    pgadmin: